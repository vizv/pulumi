# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: provider.proto for package 'pulumirpc'
# Original file comments:
# Copyright 2016-2018, Pulumi Corporation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'grpc'
require 'provider_pb'

module Pulumirpc
  module ResourceProvider
    # ResourceProvider is a service that understands how to create, read, update, or delete resources for types defined
    # within a single package.  It is driven by the overall planning engine in response to resource diffs.
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'pulumirpc.ResourceProvider'

      # GetSchema fetches the schema for this resource provider.
      rpc :GetSchema, ::Pulumirpc::GetSchemaRequest, ::Pulumirpc::GetSchemaResponse
      # CheckConfig validates the configuration for this resource provider.
      rpc :CheckConfig, ::Pulumirpc::CheckRequest, ::Pulumirpc::CheckResponse
      # DiffConfig checks the impact a hypothetical change to this provider's configuration will have on the provider.
      rpc :DiffConfig, ::Pulumirpc::DiffRequest, ::Pulumirpc::DiffResponse
      # Configure configures the resource provider with "globals" that control its behavior.
      rpc :Configure, ::Pulumirpc::ConfigureRequest, ::Pulumirpc::ConfigureResponse
      # Invoke dynamically executes a built-in function in the provider.
      rpc :Invoke, ::Pulumirpc::InvokeRequest, ::Pulumirpc::InvokeResponse
      # StreamInvoke dynamically executes a built-in function in the provider, which returns a stream
      # of responses.
      rpc :StreamInvoke, ::Pulumirpc::InvokeRequest, stream(::Pulumirpc::InvokeResponse)
      # Call dynamically executes a method in the provider associated with a component resource.
      rpc :Call, ::Pulumirpc::CallRequest, ::Pulumirpc::CallResponse
      # Check validates that the given property bag is valid for a resource of the given type and returns the inputs
      # that should be passed to successive calls to Diff, Create, or Update for this resource. As a rule, the provider
      # inputs returned by a call to Check should preserve the original representation of the properties as present in
      # the program inputs. Though this rule is not required for correctness, violations thereof can negatively impact
      # the end-user experience, as the provider inputs are using for detecting and rendering diffs.
      rpc :Check, ::Pulumirpc::CheckRequest, ::Pulumirpc::CheckResponse
      # Diff checks what impacts a hypothetical update will have on the resource's properties.
      rpc :Diff, ::Pulumirpc::DiffRequest, ::Pulumirpc::DiffResponse
      # Create allocates a new instance of the provided resource and returns its unique ID afterwards.  (The input ID
      # must be blank.)  If this call fails, the resource must not have been created (i.e., it is "transactional").
      rpc :Create, ::Pulumirpc::CreateRequest, ::Pulumirpc::CreateResponse
      # Read the current live state associated with a resource.  Enough state must be include in the inputs to uniquely
      # identify the resource; this is typically just the resource ID, but may also include some properties.
      rpc :Read, ::Pulumirpc::ReadRequest, ::Pulumirpc::ReadResponse
      # Update updates an existing resource with new values.
      rpc :Update, ::Pulumirpc::UpdateRequest, ::Pulumirpc::UpdateResponse
      # Delete tears down an existing resource with the given ID.  If it fails, the resource is assumed to still exist.
      rpc :Delete, ::Pulumirpc::DeleteRequest, ::Google::Protobuf::Empty
      # Construct creates a new instance of the provided component resource and returns its state.
      rpc :Construct, ::Pulumirpc::ConstructRequest, ::Pulumirpc::ConstructResponse
      # Cancel signals the provider to abort all outstanding resource operations.
      rpc :Cancel, ::Google::Protobuf::Empty, ::Google::Protobuf::Empty
      # GetPluginInfo returns generic information about this plugin, like its version.
      rpc :GetPluginInfo, ::Google::Protobuf::Empty, ::Pulumirpc::PluginInfo
    end

    Stub = Service.rpc_stub_class
  end
end
